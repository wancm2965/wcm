#include "stdafx.h"

#include "AH400Player.h"
#include "XAutoLock.h"


#include "../VIDEC_AH400/plaympeg4.h"
#pragma comment(lib, "../VIDEC_AH400/PlayCtrl.lib")



unsigned char g_pHiKHeaderH[40]={
			0x34,0x48,0x4b,0x48,0xfe,
			0xb3,0xd0,0xd6,0x08,0x03,
			0x02,0x20,0x00,0x00,0x00,
			0x00,0x03,0x10,0x01,0x10,
			0x01,0x10,0x10,0x00,0x80,
			0x3e,0x00,0x00,0x01,0x10,
			0x00,0x00,0x11,0x10,0x00,
			0x00,0x00,0x00,0x00,0x00};

unsigned char g_pHiKHeaderHC[40]={
			0x34,0x48,0x4b,0x48,0xfe,
			0xb3,0xd0,0xd6,0x08,0x03,
			0x04,0x20,0x00,0x00,0x00,
			0x00,0x03,0x10,0x01,0x10,
			0x01,0x10,0x10,0x00,0x80,
			0x3e,0x00,0x00,0x60,0x01,
			0x20,0x01,0x11,0x10,0x00,
			0x00,0x00,0x00,0x00,0x00};

unsigned char g_pHiKHeader4MSH[40]={
			0x34,0x4D,0x53,0x48,0x00,
			0x00,0x00,0x00,0x08,0x03,
			0x04,0x20,0x00,0x00,0x00,
			0x00,0x03,0x10,0x01,0x10,
			0x01,0x10,0x10,0x00,0x40,
			0x1F,0x00,0x00,0x60,0x01,
			0x20,0x01,0x10,0x71,0x00,
			0x00,0x00,0x00,0x00,0x80};

unsigned char g_pHiKHeaderIMKH[40]={
			0x49,0x4D,0x4B,0x48,0x01,
			0x01,0x00,0x00,0x02,0x00,
			0x01,0x00,0x21,0x72,0x01,
			0x10,0x80,0x3E,0x00,0x00,
			0x80,0x3E,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00};

unsigned char g_pHiKHeaderDS81XX_HS_S[40]={
			0x49,0x4d,0x4b,0x48,0x01,
			0x01,0x00,0x00,0x02,0x00,
			0x01,0x00,0x00,0x00,0x01,
			0x10,0x00,0x7d,0x00,0x00,
			0x00,0x7d,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,
			};

unsigned char g_pHiKHeaderDS71XX_HS_S[40]={
			0x49,0x4d,0x4b,0x48,0x01,
			0x01,0x00,0x00,0x02,0x00,
			0x01,0x00,0x21,0x72,0x01,
			0x10,0x00,0x7d,0x00,0x00,
			0x00,0x7d,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,
			};

unsigned char g_pHiKHeaderIPCAM_X62MF[40]={
			0x49,0x4d,0x4b,0x48,0x01,
			0x01,0x00,0x00,0x02,0x00,
			0x01,0x00,0x00,0x00,0x01,
			0x10,0x40,0x1f,0x00,0x00,
			0x00,0xfa,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,
			};

unsigned char g_pHiKHeaderMEGA[40]={
			0x34,0x4d,0x53,0x48,0x00,
			0x00,0x00,0x00,0x08,0x03,
			0x04,0x20,0x00,0x00,0x00,
			0x00,0x03,0x10,0x01,0x10,
			0x01,0x10,0x10,0x00,0x40,
			0x1f,0x00,0x00,0x60,0x01,
			0x20,0x01,0x10,0x71,0x00,
			0x00,0x00,0x00,0x00,0x00,
			};

unsigned char g_pNewHeaderDS80XXHD[40]={
			0x49,0x4d,0x4b,0x48,0x01,
			0x01,0x00,0x00,0x02,0x00,
			0x00,0x01,0x11,0x71,0x01,
			0x10,0x00,0x7d,0x00,0x00,
			0x00,0x7d,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00
			};

#define AH400_DECODER_BASE_INDEX		50
#define AH400_DECODER_MAX_COUNT		50

static AH400Player*	g_apAH400Player[AH400_DECODER_MAX_COUNT];
static XCritSec		g_csArrayAH400Player;

void CALLBACK AH400PlayerCallback(long nPort,char * pBuf,long nSize, FRAME_INFO * pFrameInfo,long nReserved1,long nReserved2);

class AH400PlayerManager
{
public:
	AH400PlayerManager(void)
	{
		XAutoLock l(g_csArrayAH400Player);
		for (int i=0;i<AH400_DECODER_MAX_COUNT;i++)
		{
			g_apAH400Player[i]=NULL;
		}
	};
	virtual~AH400PlayerManager(void)
	{
	}
public:
	static AH400Player*CreateAH400Player(YUV_IMAGE_CALLBACK yuv_image_cb,void*pUser)
	{
		XAutoLock l(g_csArrayAH400Player);
		for (int i=0;i<AH400_DECODER_MAX_COUNT;i++)
		{
			if (g_apAH400Player[i]==NULL)
			{
				AH400Player*pAH400Player=new AH400Player(i,yuv_image_cb,pUser);
				g_apAH400Player[i]=pAH400Player;
				return pAH400Player;
			}
		}

		return NULL;
	}
	static void FreeAH400Player(AH400Player*pAH400Player)
	{
		XAutoLock l(g_csArrayAH400Player);
		int nIndex=pAH400Player->GetIndex();
		if (g_apAH400Player[nIndex]==pAH400Player)
		{
			g_apAH400Player[nIndex]=NULL;
		}
	}
};

static AH400PlayerManager g_AH400PlayerManager;


AH400Player::AH400Player(int nIndex,YUV_IMAGE_CALLBACK yuv_image_cb,void*pUser)
:m_nIndex(nIndex+AH400_DECODER_BASE_INDEX)
,m_yuv_image_cb(yuv_image_cb)
,m_pUser(pUser)
{
}

AH400Player::~AH400Player(void)
{
	AH400PlayerManager::FreeAH400Player(this);
}

int AH400Player::Open(HIK_TYPE type)
{
	unsigned char*pHeader=g_pHiKHeaderHC;
	switch (type)
	{
	case HIK_H:
		pHeader=g_pHiKHeaderH;
		break;
	case HIK_HC:
		pHeader=g_pHiKHeaderHC;
		break;
	case HIK_CAMERA:
		pHeader=g_pHiKHeader4MSH;
		break;
	case HIK_IMKH:
		pHeader=g_pHiKHeaderIMKH;
		break;
	case HIK_DS81:
		pHeader=g_pHiKHeaderDS81XX_HS_S;
		break;
	case HIK_DS71:
		pHeader=g_pHiKHeaderDS71XX_HS_S;
		break;
	case HIK_X62MF:
		pHeader=g_pHiKHeaderIPCAM_X62MF;
		break;
	case HIK_MEGA:
		pHeader=g_pHiKHeaderMEGA;
		break;
	case HIK_DS80HD:
		pHeader=g_pNewHeaderDS80XXHD;
		break;
	}

	::PlayM4_OpenStream(m_nIndex,pHeader,40,2048000);
	::PlayM4_SetDecCallBack(m_nIndex,AH400PlayerCallback);

	::PlayM4_SetStreamOpenMode(m_nIndex,STREAME_REALTIME);
	::PlayM4_Play(m_nIndex,NULL);

	return 0;
}

void AH400Player::Close(void)
{
	::PlayM4_Stop(m_nIndex);
	::PlayM4_CloseStream(m_nIndex);
}

int AH400Player::DecodePacket(void*pPacketData,int nPacketSize)
{
	int nRet=::PlayM4_InputData(m_nIndex,(unsigned char*)pPacketData,nPacketSize);
	return 0;
}

int AH400Player::GetIndex(void)
{
	return m_nIndex-AH400_DECODER_BASE_INDEX;
}

void AH400Player::OnImageData(char*pData,long nLen,int nWidth,int nHeight,long nStamp)
{
	m_yuv_image_cb(m_pUser,(unsigned char*)pData,(int)nLen,nWidth,nHeight,nStamp);
}

void CALLBACK AH400PlayerCallback(long nPort,char * pBuf,long nSize, FRAME_INFO * pFrameInfo,long nReserved1,long nReserved2)
{
	XAutoLock l(g_csArrayAH400Player);
	long ulDecoderIndex=nPort-AH400_DECODER_BASE_INDEX;
	if (g_apAH400Player[ulDecoderIndex])
	{
		if(pFrameInfo->nType == T_YV12 && nSize>0)
		{
			//char szDebug[1024]; 
			//static long nStaticStamp=0;
			//sprintf(szDebug,"nStamp = %d Delta=%d\n",pFrameInfo->nStamp,pFrameInfo->nStamp-nStaticStamp);
			//nStaticStamp=pFrameInfo->nStamp;
			//OutputDebugString(szDebug);

			g_apAH400Player[ulDecoderIndex]->OnImageData(pBuf,nSize,pFrameInfo->nWidth,pFrameInfo->nHeight,pFrameInfo->nStamp);
		}
	}
}

VIDEC_AH400PLAYER_API void* VIDEC_AH400PlayerOpen(HIK_TYPE nType,YUV_IMAGE_CALLBACK yuv_image_cb,void*pUser)
{
	AH400Player*pAH400Player=AH400PlayerManager::CreateAH400Player(yuv_image_cb,pUser);
	if (pAH400Player!=NULL)
	{
		if (0!=pAH400Player->Open(nType))
		{
			pAH400Player->Close();
			delete pAH400Player;
			pAH400Player=NULL;
		}
	}
	return pAH400Player;
}

VIDEC_AH400PLAYER_API void VIDEC_AH400PlayerInputData(void*pHandle,unsigned char*pData,int nLen)
{
	AH400Player*pAH400Player=(AH400Player*)pHandle;
	if (pAH400Player!=NULL)
	{
		pAH400Player->DecodePacket(pData,nLen);
	}
}

VIDEC_AH400PLAYER_API void VIDEC_AH400PlayerClose(void*pHandle)
{
	AH400Player*pAH400Player=(AH400Player*)pHandle;
	if (pAH400Player!=NULL)
	{
		pAH400Player->Close();
		delete pAH400Player;
		pAH400Player=NULL;
	}
}
